name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: heterodox-main
      cancel-in-progress: true
    permissions:
      contents: read

    env:
      REMOTE_HOST: ec2-18-199-237-58.eu-central-1.compute.amazonaws.com
      REMOTE_USER: ubuntu
      REMOTE_ROOT: /home/ubuntu/heterodox
      REMOTE_DATA_DIR: /home/ubuntu/heterodox/data
      REMOTE_BACKUP_DIR: /home/ubuntu/heterodox/backups
      REMOTE_SERVICE: heterodox
      SSH_PORT: "22"         # <-- SSH port for rsync/ssh
      API_PORT: "4000"       # <-- your Node app port (do NOT name this REMOTE_PORT)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (for client build)
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Build client
        working-directory: client
        env:
          NPM_CONFIG_AUDIT: "false"
          NPM_CONFIG_FUND: "false"
        run: |
          set -euo pipefail
          npm ci
          npm run build

      - name: Ensure target dirs on VM
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:     ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          envs: REMOTE_ROOT,REMOTE_DATA_DIR,REMOTE_BACKUP_DIR
          script: |
            set -euo pipefail
            mkdir -p "$REMOTE_ROOT/client/dist"
            mkdir -p "$REMOTE_ROOT/server"
            mkdir -p "$REMOTE_DATA_DIR"
            mkdir -p "$REMOTE_BACKUP_DIR"

      - name: Deploy client build (rsync over SSH:22)
        uses: easingthemes/ssh-deploy@v5.1.0
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST:      ${{ env.REMOTE_HOST }}
          REMOTE_USER:      ${{ env.REMOTE_USER }}
          REMOTE_PORT:      ${{ env.SSH_PORT }}    # <-- force SSH port 22
          ARGS:             "-avzr --delete"
          SOURCE:           "client/dist/"
          TARGET:           "${{ env.REMOTE_ROOT }}/client/dist"

      # --- OPTIONAL: deploy backend code as well ---
      - name: Deploy server code (optional)
        if: ${{ vars.DEPLOY_SERVER == 'true' }}
        uses: easingthemes/ssh-deploy@v5.1.0
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST:      ${{ env.REMOTE_HOST }}
          REMOTE_USER:      ${{ env.REMOTE_USER }}
          REMOTE_PORT:      ${{ env.SSH_PORT }}    # <-- force SSH port 22
          # Protect secrets/DB on VM; we WANT migrations/ to ship
          ARGS: >-
            -avzr --delete
            --exclude='.git'
            --exclude='node_modules'
            --exclude='.env'
            --exclude='asa.db'
            --exclude='data/'
          SOURCE:           "server/"
          TARGET:           "${{ env.REMOTE_ROOT }}/server"

      - name: Post-deploy (migrate + restart backend if deployed; reload Caddy)
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:     ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          envs: REMOTE_ROOT,REMOTE_DATA_DIR,REMOTE_BACKUP_DIR,REMOTE_SERVICE,API_PORT
          script: |
            set -euo pipefail

            if [ "${{ vars.DEPLOY_SERVER }}" = "true" ]; then
              cd "$REMOTE_ROOT/server"
              NODE_ENV=production npm ci --omit=dev --no-audit --no-fund

              export DB_PATH="${REMOTE_DATA_DIR}/asa.db"
              mkdir -p "${REMOTE_DATA_DIR}" "${REMOTE_BACKUP_DIR}"
              if [ -f "$DB_PATH" ]; then
                ts=$(date -u +%Y%m%d_%H%M%S)
                cp -a "$DB_PATH" "${REMOTE_BACKUP_DIR}/asa.db.${ts}.sqlite"
                echo "Backed up DB to ${REMOTE_BACKUP_DIR}/asa.db.${ts}.sqlite"
              fi

              echo "=== Migration status (before) ==="
              DB_PATH="$DB_PATH" node server/migrate.js --status || true
              DB_PATH="$DB_PATH" node server/migrate.js

              sudo systemctl restart "$REMOTE_SERVICE"

              # Wait up to 60s for API to be healthy on API_PORT
              for i in $(seq 1 60); do
                if sudo ss -ltnp | grep -q ":${API_PORT}"; then
                  code=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 2 "http://127.0.0.1:${API_PORT}/" || true)
                  # Accept 200/301/302/401 as "up"
                  if echo "$code" | grep -Eq '^(200|30[12]|401)$'; then
                    echo "Backend healthy (HTTP $code)"
                    break
                  fi
                fi
                if [ "$i" -eq 60 ]; then
                  echo "Backend did not become healthy. Recent logs:"
                  sudo systemctl status "$REMOTE_SERVICE" --no-pager || true
                  sudo journalctl -u "$REMOTE_SERVICE" -n 200 --no-pager || true
                  exit 1
                fi
                sleep 1
              done

              echo "=== Migration status (after) ==="
              DB_PATH="$DB_PATH" node server/migrate.js --status || true
            fi

            sudo systemctl reload caddy || true
            echo "${{ github.sha }}" | sudo tee "${REMOTE_ROOT}/.deployed_sha" >/dev/null
            date -u | sudo tee "${REMOTE_ROOT}/.deployed_at" >/dev/null
